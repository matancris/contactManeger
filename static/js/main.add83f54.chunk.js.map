{"version":3,"sources":["cmps/ContactPreview.jsx","cmps/ContactList.jsx","services/storageService.js","services/utilService.js","services/contactService.js","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["ContactPreview","contact","onSendCheckMsg","onDeleteContact","onSendInvitation","className","name","num","onClick","id","ContactList","contacts","console","log","map","storageService","saveToStorage","key","val","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","clearStorage","clear","utilService","makeId","length","text","possible","i","charAt","Math","floor","random","CONTACT_KEY","contactService","sendMsg","result","_getValidNum","gContacts","push","_saveToStorage","_saveContact","window","open","getContacts","sendCheckMsg","valiNum","res","encodeURI","sendInvitation","url","remove","contactId","idx","findIndex","removedContact","splice","split","filter","char","join","Home","useState","setContacts","setContact","zoomUrl","setZoomUrl","useEffect","loadContacts","onInputChange","ev","target","value","onSubmit","preventDefault","onSendMsg","type","onChange","placeholder","location","reload","currContact","contactNum","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.add83f54.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport function ContactPreview({contact, onSendCheckMsg, onDeleteContact, onSendInvitation}) {\r\n    return (\r\n        <li className=\"contact-preview\">\r\n            <h1>{contact.name} - {contact.num}</h1>\r\n            <button onClick={() => onSendCheckMsg(contact)}>send check msg</button>\r\n            <button onClick={() => onSendInvitation(contact.num)}>send invitation msg</button>\r\n            <button onClick={() => onDeleteContact(contact.id)}>X</button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { ContactPreview } from './ContactPreview'\r\n\r\nexport function ContactList({ contacts, onSendCheckMsg, onDeleteContact, onSendInvitation }) {\r\n    console.log(\"🚀 ~ file: ContactList.jsx ~ line 4 ~ ContactList ~ contacts\", contacts)\r\n    return (\r\n        <ul className=\"contact-list clean-list\">\r\n\r\n            {\r\n                contacts.map(contact => <ContactPreview key={contact.id}\r\n                    contact={contact}\r\n                    onSendCheckMsg={onSendCheckMsg}\r\n                    onDeleteContact={onDeleteContact}\r\n                    onSendInvitation={onSendInvitation}\r\n                ></ContactPreview>)\r\n            }\r\n\r\n        </ul>\r\n    )\r\n}\r\n","\r\nexport const storageService = {\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    clearStorage\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val))\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return JSON.parse(val);\r\n}\r\n\r\nfunction clearStorage() {\r\n    localStorage.clear()\r\n}\r\n","function makeId(length=3) {\r\n    var text = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    for(let i=0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return text;\r\n}\r\n\r\nexport const utilService = {\r\n    makeId\r\n}","import { storageService } from \"./storageService\";\r\nimport { utilService } from \"./utilService\";\r\n\r\nconst CONTACT_KEY= 'myContacts'\r\n\r\nexport const contactService = {\r\n    sendMsg,\r\n    getContacts,\r\n    sendCheckMsg,\r\n    sendInvitation,\r\n    remove\r\n}\r\n\r\nvar gContacts = storageService.loadFromStorage(CONTACT_KEY) || []\r\n\r\nfunction getContacts() {\r\n    return gContacts\r\n}\r\n\r\nfunction sendMsg(contact) {\r\n    console.log(\"🚀 ~ file: contactService.js ~ line 6 ~ sendMsg ~ num\", contact.num)\r\n    if (!contact.num || contact.num.length < 10) {\r\n        console.log('invalid num');\r\n        return\r\n    };\r\n    var valiNum = _getValidNum(contact.num)\r\n    var result = \"https://api.whatsapp.com/send?phone=972\" + valiNum;\r\n    _saveContact(contact)\r\n    window.open(result, \"_blank\");\r\n}\r\n\r\nfunction sendCheckMsg(contact) {\r\n    let valiNum = _getValidNum(contact.num)\r\n    let res = encodeURI(`אהלן ${contact.name}! זה מתן מקודינג אקדמי:) היום ערב ההכרות שלנו! את/ה מגיע/ה?`); \r\n    window.open(`https://wa.me/972${valiNum}/?text=${res}`)\r\n}\r\n\r\nfunction sendInvitation(url , num) {\r\n    let valiNum = _getValidNum(num)\r\n    let res = encodeURI(`זה הלינק לערב ההכרות שמתחיל בשעה 18:00:\\n\\n ${url} \\n\\n כדאי להכנס קצת לפני כדי לראות שאין בעיות טכניות. \\n\\n מחכה לראותך!:)`); \r\n    window.open(`https://wa.me/972${valiNum}/?text=${res}`)\r\n}\r\n\r\nfunction remove(contactId) {\r\n    const idx = gContacts.findIndex(contact => contact.id === contactId)\r\n    const removedContact = gContacts.splice(idx, 1)\r\n    _saveToStorage()\r\n    return removedContact\r\n}\r\n\r\n\r\n// Local Functions\r\nfunction _getValidNum(num) {\r\n    return num.split('').filter((char) => char !== '-').join('')\r\n}\r\n\r\n\r\nfunction _saveContact(contact) {\r\n    contact.id = utilService.makeId()\r\n    gContacts.push(contact)\r\n    _saveToStorage()\r\n}\r\n\r\nfunction _saveToStorage() {\r\n    storageService.saveToStorage(CONTACT_KEY, gContacts)\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { ContactList } from '../cmps/ContactList'\r\nimport { contactService } from '../services/contactService'\r\nimport { storageService } from '../services/storageService'\r\n\r\nexport function Home() {\r\n\r\n    const [contacts, setContacts] = useState([])\r\n    const [contact, setContact] = useState({ name: '', num: '' })\r\n    const [zoomUrl, setZoomUrl] = useState('')\r\n\r\n    useEffect(() => {\r\n        loadContacts()\r\n        console.log(contact)\r\n    }, [contact])\r\n\r\n    const loadContacts = () => {\r\n        const contacts = contactService.getContacts()\r\n        setContacts([...contacts])\r\n    }\r\n\r\n    const onSendMsg = (ev) => {\r\n        ev.preventDefault();\r\n        console.log(contact);\r\n        contactService.sendMsg(contact)\r\n        setContact({ name: '', num: '' })\r\n    }\r\n\r\n    const onInputChange = (ev) => {\r\n        setContact({\r\n            ...contact, [ev.target.name]: ev.target.value\r\n        })\r\n    }\r\n\r\n    const onSendCheckMsg = (currContact) => {\r\n        contactService.sendCheckMsg(currContact)\r\n    }\r\n\r\n    const onSendInvitation = (contactNum) => {\r\n        contactService.sendInvitation(zoomUrl, contactNum)\r\n    }\r\n\r\n    const onDeleteContact = (contactId) => {\r\n        contactService.remove(contactId)\r\n        loadContacts()\r\n    }\r\n\r\n    function onClearStorage() {\r\n        storageService.clearStorage()\r\n        window.location.reload();\r\n    }\r\n\r\n    const onSetZoomUrl = (ev) => {\r\n        setZoomUrl(ev.target.value)        \r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"homepage\">\r\n            <h1>Contacts-Manager</h1>\r\n            <form onSubmit={(ev) => onSendMsg(ev)}>\r\n                <input type=\"text\" onChange={onInputChange} name=\"num\" value={contact.num} placeholder=\"num\" />\r\n                <input type=\"text\" onChange={onInputChange} name=\"name\" value={contact.name} placeholder=\"name\" />\r\n                <button>send</button>\r\n            </form>\r\n            <input type=\"text\" placeholder=\"ZOOM url\" onChange={onSetZoomUrl}/>\r\n            <button className=\"clear-btn\" onClick={() => onClearStorage()}>clear storage</button>\r\n            <ContactList contacts={contacts} onSendCheckMsg={onSendCheckMsg} onDeleteContact={onDeleteContact} onSendInvitation={onSendInvitation} />\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Home } from './pages/Home';\n\nfunction App() {\n  return (\n    <section className=\"App\">\n      <Home/>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/global.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}