{"version":3,"sources":["cmps/ContactFilter.jsx","cmps/ContactPreview.jsx","cmps/ContactList.jsx","services/storageService.js","services/utilService.js","services/contactService.js","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["ContactFilter","onSetFilter","useState","status","filter","setFilter","useEffect","handleChange","target","value","className","htmlFor","type","name","id","onChange","ContactPreview","contact","onSendMsg","onDeleteContact","console","log","num","onClick","ContactList","contacts","map","storageService","saveToStorage","key","val","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","clearStorage","clear","utilService","makeId","length","text","possible","i","charAt","Math","floor","random","CONTACT_KEY","contactService","addContact","gContacts","push","_saveToStorage","_saveContact","getContacts","sendMsg","url","res","valiNum","split","char","join","encodeURI","setContactStatus","window","open","remove","contactId","idx","findIndex","removedContact","splice","newStatus","Home","setContacts","setContact","zoomUrl","setZoomUrl","loadContacts","onInputChange","ev","onSubmit","preventDefault","onAddContact","placeholder","location","reload","currContact","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d6a3b4c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nexport function ContactFilter({ onSetFilter }) {\r\n\r\n    const [filter, setFilter] = useState({ status: '' })\r\n\r\n    useEffect(() => {\r\n        onSetFilter(filter)\r\n    }, [filter])\r\n\r\n    const handleChange = ({ target }) => {\r\n        // ev.persist()\r\n        setFilter({ status: target.value })\r\n        // onSetFilter(filter)\r\n    }\r\n\r\n    return (\r\n        <form className=\"contact-filter\">\r\n            <label htmlFor=\"all\">\r\n            <input type=\"radio\" name=\"status\" id=\"all\" value=\"\" onChange={handleChange} />\r\n            all\r\n            </label>\r\n            <label htmlFor=\"first\">\r\n            <input type=\"radio\" name=\"status\" id=\"first\" value=\"first-step\" onChange={handleChange} />\r\n            first step \r\n            </label>\r\n            <label htmlFor=\"second\">\r\n            <input type=\"radio\" name=\"status\" id=\"second\" value=\"second-step\" onChange={handleChange} />\r\n            second step\r\n            </label>\r\n            <label htmlFor=\"third\">\r\n            <input type=\"radio\" name=\"status\" id=\"third\" value=\"third-step\" onChange={handleChange} />\r\n            third step\r\n            </label>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport function ContactPreview({contact, onSendMsg, onDeleteContact}) {\r\n    console.log(contact);\r\n    return (\r\n        <li className={`contact-preview ${contact.status}`}>\r\n            <h1>{contact.name} - {contact.num}</h1>\r\n            <button onClick={() => onSendMsg(contact, 'first-step')}>send check msg</button>\r\n            <button onClick={() => onSendMsg(contact, 'second-step')}>send invitation msg</button>\r\n            <button onClick={() => onSendMsg(contact, 'third-step')}>send start msg</button>\r\n            <button onClick={() => onDeleteContact(contact.id)}>X</button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { ContactPreview } from './ContactPreview'\r\n\r\nexport function ContactList({ contacts, onSendMsg, onDeleteContact }) {\r\n    console.log(\"🚀 ~ file: ContactList.jsx ~ line 4 ~ ContactList ~ contacts\", contacts)\r\n    return (\r\n        <ul className=\"contact-list clean-list\">\r\n\r\n            {\r\n                contacts.map(contact => <ContactPreview key={contact.id}\r\n                    contact={contact}\r\n                    onSendMsg={onSendMsg}\r\n                    onDeleteContact={onDeleteContact}\r\n                ></ContactPreview>)\r\n            }\r\n\r\n        </ul>\r\n    )\r\n}\r\n","\r\nexport const storageService = {\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    clearStorage\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val))\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return JSON.parse(val);\r\n}\r\n\r\nfunction clearStorage() {\r\n    localStorage.clear()\r\n}\r\n","function makeId(length=3) {\r\n    var text = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    for(let i=0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return text;\r\n}\r\n\r\nexport const utilService = {\r\n    makeId\r\n}","import { storageService } from \"./storageService\";\r\nimport { utilService } from \"./utilService\";\r\n\r\nconst CONTACT_KEY= 'myContacts'\r\n\r\nexport const contactService = {\r\n    addContact,\r\n    getContacts,\r\n    sendMsg,\r\n    setContactStatus,\r\n    remove\r\n}\r\n\r\nvar gContacts = storageService.loadFromStorage(CONTACT_KEY) || []\r\n\r\nfunction getContacts(filter = {}) {\r\n    if (!filter.status) return gContacts;\r\n    const contacts = gContacts.filter(contact => contact.status === filter.status)\r\n    return contacts\r\n}\r\n\r\nfunction addContact(contact) {\r\n    console.log(\"🚀 ~ file: contactService.js ~ line 6 ~ sendMsg ~ num\", contact.num)\r\n    if (!contact.num || contact.num.length < 10) {\r\n        console.log('invalid num');\r\n        return\r\n    };\r\n    _saveContact(contact)\r\n}\r\n\r\nfunction sendMsg(contact, status, url) {\r\n    let valiNum = _getValidNum(contact.num)\r\n    let res;\r\n    switch (status) {\r\n        case 'first-step':\r\n            res = encodeURI(`אהלן ${contact.name}! זה מתן מקודינג אקדמי:) היום ערב ההכרות שלנו! אני אראה אותך שם?`); \r\n            break;\r\n        case 'second-step':\r\n            res = encodeURI(`זה הלינק לערב ההכרות שמתחיל בשעה 18:00:\\n\\n ${url} \\n\\n כדאי להכנס קצת לפני כדי לראות שאין בעיות טכניות. \\n\\n מחכה לראותך!:)`); \r\n            break;\r\n        case 'third-step':\r\n            res = encodeURI(`מתחילים עוד כמה דקות! כדאי להכנס ולראות אם הכל עובד כמו שצריך:)`);    \r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    setContactStatus(contact.id, status)\r\n    window.open(`https://wa.me/972${valiNum}/?text=${res}`)\r\n}\r\n\r\n\r\nfunction setContactStatus(contactId, newStatus) {\r\n    const idx = _getIdxById(contactId) \r\n    gContacts[idx].status = newStatus\r\n    _saveToStorage()\r\n}\r\n\r\nfunction remove(contactId) {\r\n    const idx = gContacts.findIndex(contact => contact.id === contactId)\r\n    const removedContact = gContacts.splice(idx, 1)\r\n    _saveToStorage()\r\n    return removedContact\r\n}\r\n\r\n\r\n// Local Functions\r\n\r\nfunction _getValidNum(num) {\r\n    return num.split('').filter((char) => char !== '-').join('')\r\n}\r\n\r\nfunction _getIdxById(id) {\r\n    return gContacts.findIndex(contact => contact.id === id)\r\n}\r\n\r\nfunction _saveContact(contact) {\r\n    contact.id = utilService.makeId()\r\n    gContacts.push(contact)\r\n    _saveToStorage()\r\n}\r\n\r\nfunction _saveToStorage() {\r\n    storageService.saveToStorage(CONTACT_KEY, gContacts)\r\n}\r\n\r\n\r\n\r\n// DEPRECAED\r\n\r\n\r\n// function sendCheckMsg(contact) {\r\n//     let valiNum = _getValidNum(contact.num)\r\n//     let res = encodeURI(`אהלן ${contact.name}! זה מתן מקודינג אקדמי:) היום ערב ההכרות שלנו! את/ה מגיע/ה?`); \r\n//     window.open(`https://wa.me/972${valiNum}/?text=${res}`)\r\n// }\r\n\r\n// function sendInvitation(url , num) {\r\n//     let valiNum = _getValidNum(num)\r\n//     let res = encodeURI(`זה הלינק לערב ההכרות שמתחיל בשעה 18:00:\\n\\n ${url} \\n\\n כדאי להכנס קצת לפני כדי לראות שאין בעיות טכניות. \\n\\n מחכה לראותך!:)`); \r\n//     window.open(`https://wa.me/972${valiNum}/?text=${res}`)\r\n// }\r\n\r\n// function sendStartMsg(num) {\r\n//     let valiNum = _getValidNum(num)\r\n//     let res = encodeURI(`מתחילים עוד כמה דקות! כדאי להכנס ולראות אם הכל עובד כמו שצריך:)`); \r\n//     window.open(`https://wa.me/972${valiNum}/?text=${res}`)\r\n// }","import React, { useEffect, useState } from 'react'\r\nimport { ContactFilter } from '../cmps/ContactFilter'\r\nimport { ContactList } from '../cmps/ContactList'\r\nimport { contactService } from '../services/contactService'\r\nimport { storageService } from '../services/storageService'\r\n\r\nexport function Home() {\r\n\r\n    const [contacts, setContacts] = useState([])\r\n    const [contact, setContact] = useState({ name: '', num: '', status: '' })\r\n    const [zoomUrl, setZoomUrl] = useState('')\r\n\r\n    useEffect(() => {\r\n        loadContacts()\r\n        console.log(contact)\r\n    }, [contact])\r\n\r\n    const loadContacts = (filter) => {\r\n        const contacts = contactService.getContacts(filter)\r\n        setContacts([...contacts])\r\n    }\r\n\r\n    const onAddContact = (ev) => {\r\n        ev.preventDefault();\r\n        console.log(contact);\r\n        contactService.addContact(contact)\r\n        setContact({ name: '', num: '' })\r\n    }\r\n\r\n    const onInputChange = (ev) => {\r\n        setContact({\r\n            ...contact, [ev.target.name]: ev.target.value\r\n        })\r\n    }\r\n\r\n    const onSendMsg = (currContact, status) => {\r\n        contactService.sendMsg(currContact, status, zoomUrl)\r\n        loadContacts()\r\n    }\r\n\r\n    const onDeleteContact = (contactId) => {\r\n        contactService.remove(contactId)\r\n        loadContacts()\r\n    }\r\n\r\n    function onClearStorage() {\r\n        storageService.clearStorage()\r\n        window.location.reload();\r\n    }\r\n\r\n    const onSetZoomUrl = (ev) => {\r\n        setZoomUrl(ev.target.value)\r\n    }\r\n\r\n    const onSetFilter = (filter) => {\r\n        console.log(filter);\r\n        loadContacts(filter)\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"homepage\">\r\n            <h1>Contacts-Manager</h1>\r\n            <form className=\"main-form\" onSubmit={(ev) => onAddContact(ev)}>\r\n                <input type=\"text\" onChange={onInputChange} name=\"num\" value={contact.num} placeholder=\"num\" />\r\n                <input type=\"text\" onChange={onInputChange} name=\"name\" value={contact.name} placeholder=\"name\" />\r\n                <button>add</button>\r\n            </form>\r\n            <input type=\"text\" placeholder=\"ZOOM url\" onChange={onSetZoomUrl} />\r\n            <button className=\"clear-btn\" onClick={() => onClearStorage()}>clear storage</button>\r\n            <ContactFilter onSetFilter={onSetFilter}/>\r\n            <ContactList contacts={contacts} onSendMsg={onSendMsg} onDeleteContact={onDeleteContact} />\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Home } from './pages/Home';\n\nfunction App() {\n  return (\n    <section className=\"App\">\n      <Home/>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/global.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}