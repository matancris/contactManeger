{"version":3,"sources":["cmps/ContactPreview.jsx","cmps/ContactList.jsx","services/storageService.js","services/utilService.js","services/contactService.js","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["ContactPreview","contact","onSendMsg","onDeleteContact","console","log","className","status","name","num","onClick","id","ContactList","contacts","map","storageService","saveToStorage","key","val","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","clearStorage","clear","utilService","makeId","length","text","possible","i","charAt","Math","floor","random","CONTACT_KEY","contactService","addContact","gContacts","push","_saveToStorage","_saveContact","getContacts","sendMsg","url","res","valiNum","split","filter","char","join","encodeURI","setContactStatus","window","open","remove","contactId","idx","findIndex","removedContact","splice","newStatus","Home","useState","setContacts","setContact","zoomUrl","setZoomUrl","useEffect","loadContacts","onInputChange","ev","target","value","onSubmit","preventDefault","onAddContact","type","onChange","placeholder","location","reload","currContact","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47cd84c6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// export function ContactPreview({contact, onSendCheckMsg, onDeleteContact, onSendInvitation,onSendStartMsg}) {\r\nexport function ContactPreview({contact, onSendMsg, onDeleteContact}) {\r\n    console.log(contact);\r\n    return (\r\n        <li className={`contact-preview ${contact.status}`}>\r\n            <h1>{contact.name} - {contact.num}</h1>\r\n            <button onClick={() => onSendMsg(contact, 'first-step')}>send check msg</button>\r\n            <button onClick={() => onSendMsg(contact, 'second-step')}>send invitation msg</button>\r\n            <button onClick={() => onSendMsg(contact, 'third-step')}>send start msg</button>\r\n            <button onClick={() => onDeleteContact(contact.id)}>X</button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { ContactPreview } from './ContactPreview'\r\n\r\n// export function ContactList({ contacts, onSendCheckMsg, onDeleteContact, onSendInvitation , onSendStartMsg }) {\r\nexport function ContactList({ contacts, onSendMsg, onDeleteContact }) {\r\n    console.log(\"🚀 ~ file: ContactList.jsx ~ line 4 ~ ContactList ~ contacts\", contacts)\r\n    return (\r\n        <ul className=\"contact-list clean-list\">\r\n\r\n            {\r\n                contacts.map(contact => <ContactPreview key={contact.id}\r\n                    contact={contact}\r\n                    onSendMsg={onSendMsg}\r\n                    // onSendCheckMsg={onSendCheckMsg}\r\n                    onDeleteContact={onDeleteContact}\r\n                    // onSendInvitation={onSendInvitation}\r\n                    // onSendStartMsg={onSendStartMsg}\r\n                ></ContactPreview>)\r\n            }\r\n\r\n        </ul>\r\n    )\r\n}\r\n","\r\nexport const storageService = {\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    clearStorage\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val))\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return JSON.parse(val);\r\n}\r\n\r\nfunction clearStorage() {\r\n    localStorage.clear()\r\n}\r\n","function makeId(length=3) {\r\n    var text = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    for(let i=0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return text;\r\n}\r\n\r\nexport const utilService = {\r\n    makeId\r\n}","import { storageService } from \"./storageService\";\r\nimport { utilService } from \"./utilService\";\r\n\r\nconst CONTACT_KEY= 'myContacts'\r\n\r\nexport const contactService = {\r\n    addContact,\r\n    getContacts,\r\n    // sendCheckMsg,\r\n    // sendInvitation,\r\n    // sendStartMsg,\r\n    sendMsg,\r\n    setContactStatus,\r\n    remove\r\n}\r\n\r\nvar gContacts = storageService.loadFromStorage(CONTACT_KEY) || []\r\n\r\nfunction getContacts() {\r\n    return gContacts\r\n}\r\n\r\nfunction addContact(contact) {\r\n    console.log(\"🚀 ~ file: contactService.js ~ line 6 ~ sendMsg ~ num\", contact.num)\r\n    if (!contact.num || contact.num.length < 10) {\r\n        console.log('invalid num');\r\n        return\r\n    };\r\n    // var valiNum = _getValidNum(contact.num)\r\n    // var result = \"https://api.whatsapp.com/send?phone=972\" + valiNum;\r\n    _saveContact(contact)\r\n    // window.open(result, \"_blank\");\r\n}\r\n\r\nfunction sendMsg(contact, status, url) {\r\n    let valiNum = _getValidNum(contact.num)\r\n    let res;\r\n    switch (status) {\r\n        case 'first-step':\r\n            res = encodeURI(`אהלן ${contact.name}! זה מתן מקודינג אקדמי:) היום ערב ההכרות שלנו! אני אראה אותך שם?`); \r\n            break;\r\n        case 'second-step':\r\n            res = encodeURI(`זה הלינק לערב ההכרות שמתחיל בשעה 18:00:\\n\\n ${url} \\n\\n כדאי להכנס קצת לפני כדי לראות שאין בעיות טכניות. \\n\\n מחכה לראותך!:)`); \r\n            break;\r\n        case 'third-step':\r\n            res = encodeURI(`מתחילים עוד כמה דקות! כדאי להכנס ולראות אם הכל עובד כמו שצריך:)`);    \r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    setContactStatus(contact.id, status)\r\n    window.open(`https://wa.me/972${valiNum}/?text=${res}`)\r\n}\r\n\r\n// function sendCheckMsg(contact) {\r\n//     let valiNum = _getValidNum(contact.num)\r\n//     let res = encodeURI(`אהלן ${contact.name}! זה מתן מקודינג אקדמי:) היום ערב ההכרות שלנו! את/ה מגיע/ה?`); \r\n//     window.open(`https://wa.me/972${valiNum}/?text=${res}`)\r\n// }\r\n\r\n// function sendInvitation(url , num) {\r\n//     let valiNum = _getValidNum(num)\r\n//     let res = encodeURI(`זה הלינק לערב ההכרות שמתחיל בשעה 18:00:\\n\\n ${url} \\n\\n כדאי להכנס קצת לפני כדי לראות שאין בעיות טכניות. \\n\\n מחכה לראותך!:)`); \r\n//     window.open(`https://wa.me/972${valiNum}/?text=${res}`)\r\n// }\r\n\r\n// function sendStartMsg(num) {\r\n//     let valiNum = _getValidNum(num)\r\n//     let res = encodeURI(`מתחילים עוד כמה דקות! כדאי להכנס ולראות אם הכל עובד כמו שצריך:)`); \r\n//     window.open(`https://wa.me/972${valiNum}/?text=${res}`)\r\n// }\r\n\r\nfunction setContactStatus(contactId, newStatus) {\r\n    const idx = _getIdxById(contactId) \r\n    gContacts[idx].status = newStatus\r\n}\r\n\r\nfunction remove(contactId) {\r\n    const idx = gContacts.findIndex(contact => contact.id === contactId)\r\n    const removedContact = gContacts.splice(idx, 1)\r\n    _saveToStorage()\r\n    return removedContact\r\n}\r\n\r\n\r\n// Local Functions\r\nfunction _getValidNum(num) {\r\n    return num.split('').filter((char) => char !== '-').join('')\r\n}\r\n\r\nfunction _getIdxById(id) {\r\n    return gContacts.findIndex(contact => contact.id === id)\r\n}\r\n\r\n\r\nfunction _saveContact(contact) {\r\n    contact.id = utilService.makeId()\r\n    gContacts.push(contact)\r\n    _saveToStorage()\r\n}\r\n\r\nfunction _saveToStorage() {\r\n    storageService.saveToStorage(CONTACT_KEY, gContacts)\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { ContactList } from '../cmps/ContactList'\r\nimport { contactService } from '../services/contactService'\r\nimport { storageService } from '../services/storageService'\r\n\r\nexport function Home() {\r\n\r\n    const [contacts, setContacts] = useState([])\r\n    const [contact, setContact] = useState({ name: '', num: '', status: '' })\r\n    const [zoomUrl, setZoomUrl] = useState('')\r\n\r\n    useEffect(() => {\r\n        loadContacts()\r\n        console.log(contact)\r\n    }, [contact])\r\n\r\n    const loadContacts = () => {\r\n        const contacts = contactService.getContacts()\r\n        setContacts([...contacts])\r\n    }\r\n\r\n    const onAddContact = (ev) => {\r\n        ev.preventDefault();\r\n        console.log(contact);\r\n        contactService.addContact(contact)\r\n        setContact({ name: '', num: '' })\r\n    }\r\n\r\n    const onInputChange = (ev) => {\r\n        setContact({\r\n            ...contact, [ev.target.name]: ev.target.value\r\n        })\r\n    }\r\n\r\n    const onSendMsg = (currContact, status) => {\r\n        contactService.sendMsg(currContact, status, zoomUrl)\r\n        loadContacts()\r\n    }\r\n\r\n    // const onSendCheckMsg = (currContact) => {\r\n    //     contactService.sendCheckMsg(currContact)\r\n    //     contactService.setContactStatus(currContact.id, 'first-step')\r\n    //     loadContacts()\r\n    // }\r\n\r\n    // const onSendInvitation = (currContact) => {\r\n    //     contactService.sendInvitation(zoomUrl, currContact.num)\r\n    //     contactService.setContactStatus(currContact.id, 'second-step')\r\n    //     loadContacts()\r\n    // }\r\n\r\n    // const onSendStartMsg = (currContact) => {\r\n    //     contactService.sendStartMsg(currContact.num)\r\n    //     contactService.setContactStatus(currContact.id, 'third-step')\r\n    //     loadContacts()\r\n    // }\r\n\r\n    const onDeleteContact = (contactId) => {\r\n        contactService.remove(contactId)\r\n        loadContacts()\r\n    }\r\n\r\n    function onClearStorage() {\r\n        storageService.clearStorage()\r\n        window.location.reload();\r\n    }\r\n\r\n    const onSetZoomUrl = (ev) => {\r\n        setZoomUrl(ev.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"homepage\">\r\n            <h1>Contacts-Manager</h1>\r\n            <form onSubmit={(ev) => onAddContact(ev)}>\r\n                <input type=\"text\" onChange={onInputChange} name=\"num\" value={contact.num} placeholder=\"num\" />\r\n                <input type=\"text\" onChange={onInputChange} name=\"name\" value={contact.name} placeholder=\"name\" />\r\n                <button>send</button>\r\n            </form>\r\n            <input type=\"text\" placeholder=\"ZOOM url\" onChange={onSetZoomUrl} />\r\n            <button className=\"clear-btn\" onClick={() => onClearStorage()}>clear storage</button>\r\n            <ContactList contacts={contacts}\r\n                onSendMsg={onSendMsg}\r\n                // onSendCheckMsg={onSendCheckMsg}\r\n                onDeleteContact={onDeleteContact}\r\n                // onSendInvitation={onSendInvitation}\r\n                // onSendStartMsg={onSendStartMsg}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Home } from './pages/Home';\n\nfunction App() {\n  return (\n    <section className=\"App\">\n      <Home/>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/global.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}